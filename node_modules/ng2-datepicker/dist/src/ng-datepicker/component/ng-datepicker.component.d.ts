import { OnInit, OnChanges, SimpleChanges, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ISlimScrollOptions } from 'ngx-slimscroll';
import * as ɵngcc0 from '@angular/core';
export declare type AddClass = string | string[] | {
    [k: string]: boolean;
} | null;
export interface DatepickerOptions {
    minYear?: number;
    maxYear?: number;
    displayFormat?: string;
    barTitleFormat?: string;
    dayNamesFormat?: string;
    barTitleIfEmpty?: string;
    firstCalendarDay?: number;
    locale?: object;
    minDate?: Date;
    maxDate?: Date;
    /** Placeholder for the input field */
    placeholder?: string;
    /** [ngClass] to add to the input field */
    addClass?: AddClass;
    /** [ngStyle] to add to the input field */
    addStyle?: {
        [k: string]: any;
    } | null;
    /** ID to assign to the input field */
    fieldId?: string;
    /** If false, barTitleIfEmpty will be disregarded and a date will always be shown. Default: true */
    useEmptyBarTitle?: boolean;
}
export declare class NgDatepickerComponent implements ControlValueAccessor, OnInit, OnChanges {
    private elementRef;
    options: DatepickerOptions;
    /**
     * Disable datepicker's input
     */
    headless: boolean;
    /**
     * Set datepicker's visibility state
     */
    isOpened: boolean;
    /**
     * Datepicker dropdown position
     */
    position: string;
    private positions;
    innerValue: Date;
    displayValue: string;
    displayFormat: string;
    date: Date;
    barTitle: string;
    barTitleFormat: string;
    barTitleIfEmpty: string;
    minYear: number;
    maxYear: number;
    firstCalendarDay: number;
    view: string;
    years: {
        year: number;
        isThisYear: boolean;
    }[];
    dayNames: string[];
    dayNamesFormat: string;
    scrollOptions: ISlimScrollOptions;
    days: {
        date: Date;
        day: number;
        month: number;
        year: number;
        inThisMonth: boolean;
        isToday: boolean;
        isSelected: boolean;
        isSelectable: boolean;
    }[];
    locale: object;
    placeholder: string;
    addClass: AddClass;
    addStyle: {
        [k: string]: any;
    } | null;
    fieldId: string;
    useEmptyBarTitle: boolean;
    disabled: boolean;
    private onTouchedCallback;
    private onChangeCallback;
    setDisabledState(isDisabled: boolean): void;
    value: Date;
    constructor(elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    readonly defaultFieldId: string;
    setOptions(): void;
    nextMonth(): void;
    prevMonth(): void;
    setDate(i: number): void;
    setYear(i: number): void;
    /**
     * Checks if specified date is in range of min and max dates
     * @param date
     */
    private isDateSelectable(date);
    init(): void;
    initYears(): void;
    initDayNames(): void;
    toggleView(): void;
    toggle(): void;
    close(): void;
    reset(fireValueChangeEvent?: boolean): void;
    writeValue(val: Date): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onBlur(e: MouseEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgDatepickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgDatepickerComponent, "ng-datepicker", never, { "headless": "headless"; "isOpened": "isOpened"; "position": "position"; "options": "options"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmctZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgSVNsaW1TY3JvbGxPcHRpb25zIH0gZnJvbSAnbmd4LXNsaW1zY3JvbGwnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBBZGRDbGFzcyA9IHN0cmluZyB8IHN0cmluZ1tdIHwge1xuICAgIFtrOiBzdHJpbmddOiBib29sZWFuO1xufSB8IG51bGw7XG5leHBvcnQgaW50ZXJmYWNlIERhdGVwaWNrZXJPcHRpb25zIHtcbiAgICBtaW5ZZWFyPzogbnVtYmVyO1xuICAgIG1heFllYXI/OiBudW1iZXI7XG4gICAgZGlzcGxheUZvcm1hdD86IHN0cmluZztcbiAgICBiYXJUaXRsZUZvcm1hdD86IHN0cmluZztcbiAgICBkYXlOYW1lc0Zvcm1hdD86IHN0cmluZztcbiAgICBiYXJUaXRsZUlmRW1wdHk/OiBzdHJpbmc7XG4gICAgZmlyc3RDYWxlbmRhckRheT86IG51bWJlcjtcbiAgICBsb2NhbGU/OiBvYmplY3Q7XG4gICAgbWluRGF0ZT86IERhdGU7XG4gICAgbWF4RGF0ZT86IERhdGU7XG4gICAgLyoqIFBsYWNlaG9sZGVyIGZvciB0aGUgaW5wdXQgZmllbGQgKi9cbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgICAvKiogW25nQ2xhc3NdIHRvIGFkZCB0byB0aGUgaW5wdXQgZmllbGQgKi9cbiAgICBhZGRDbGFzcz86IEFkZENsYXNzO1xuICAgIC8qKiBbbmdTdHlsZV0gdG8gYWRkIHRvIHRoZSBpbnB1dCBmaWVsZCAqL1xuICAgIGFkZFN0eWxlPzoge1xuICAgICAgICBbazogc3RyaW5nXTogYW55O1xuICAgIH0gfCBudWxsO1xuICAgIC8qKiBJRCB0byBhc3NpZ24gdG8gdGhlIGlucHV0IGZpZWxkICovXG4gICAgZmllbGRJZD86IHN0cmluZztcbiAgICAvKiogSWYgZmFsc2UsIGJhclRpdGxlSWZFbXB0eSB3aWxsIGJlIGRpc3JlZ2FyZGVkIGFuZCBhIGRhdGUgd2lsbCBhbHdheXMgYmUgc2hvd24uIERlZmF1bHQ6IHRydWUgKi9cbiAgICB1c2VFbXB0eUJhclRpdGxlPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nRGF0ZXBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIG9wdGlvbnM6IERhdGVwaWNrZXJPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIERpc2FibGUgZGF0ZXBpY2tlcidzIGlucHV0XG4gICAgICovXG4gICAgaGVhZGxlc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IGRhdGVwaWNrZXIncyB2aXNpYmlsaXR5IHN0YXRlXG4gICAgICovXG4gICAgaXNPcGVuZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGF0ZXBpY2tlciBkcm9wZG93biBwb3NpdGlvblxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwb3NpdGlvbnM7XG4gICAgaW5uZXJWYWx1ZTogRGF0ZTtcbiAgICBkaXNwbGF5VmFsdWU6IHN0cmluZztcbiAgICBkaXNwbGF5Rm9ybWF0OiBzdHJpbmc7XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBiYXJUaXRsZTogc3RyaW5nO1xuICAgIGJhclRpdGxlRm9ybWF0OiBzdHJpbmc7XG4gICAgYmFyVGl0bGVJZkVtcHR5OiBzdHJpbmc7XG4gICAgbWluWWVhcjogbnVtYmVyO1xuICAgIG1heFllYXI6IG51bWJlcjtcbiAgICBmaXJzdENhbGVuZGFyRGF5OiBudW1iZXI7XG4gICAgdmlldzogc3RyaW5nO1xuICAgIHllYXJzOiB7XG4gICAgICAgIHllYXI6IG51bWJlcjtcbiAgICAgICAgaXNUaGlzWWVhcjogYm9vbGVhbjtcbiAgICB9W107XG4gICAgZGF5TmFtZXM6IHN0cmluZ1tdO1xuICAgIGRheU5hbWVzRm9ybWF0OiBzdHJpbmc7XG4gICAgc2Nyb2xsT3B0aW9uczogSVNsaW1TY3JvbGxPcHRpb25zO1xuICAgIGRheXM6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgZGF5OiBudW1iZXI7XG4gICAgICAgIG1vbnRoOiBudW1iZXI7XG4gICAgICAgIHllYXI6IG51bWJlcjtcbiAgICAgICAgaW5UaGlzTW9udGg6IGJvb2xlYW47XG4gICAgICAgIGlzVG9kYXk6IGJvb2xlYW47XG4gICAgICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgICAgIGlzU2VsZWN0YWJsZTogYm9vbGVhbjtcbiAgICB9W107XG4gICAgbG9jYWxlOiBvYmplY3Q7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBhZGRDbGFzczogQWRkQ2xhc3M7XG4gICAgYWRkU3R5bGU6IHtcbiAgICAgICAgW2s6IHN0cmluZ106IGFueTtcbiAgICB9IHwgbnVsbDtcbiAgICBmaWVsZElkOiBzdHJpbmc7XG4gICAgdXNlRW1wdHlCYXJUaXRsZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrO1xuICAgIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjaztcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHZhbHVlOiBEYXRlO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgZGVmYXVsdEZpZWxkSWQ6IHN0cmluZztcbiAgICBzZXRPcHRpb25zKCk6IHZvaWQ7XG4gICAgbmV4dE1vbnRoKCk6IHZvaWQ7XG4gICAgcHJldk1vbnRoKCk6IHZvaWQ7XG4gICAgc2V0RGF0ZShpOiBudW1iZXIpOiB2b2lkO1xuICAgIHNldFllYXIoaTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgc3BlY2lmaWVkIGRhdGUgaXMgaW4gcmFuZ2Ugb2YgbWluIGFuZCBtYXggZGF0ZXNcbiAgICAgKiBAcGFyYW0gZGF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgaXNEYXRlU2VsZWN0YWJsZShkYXRlKTtcbiAgICBpbml0KCk6IHZvaWQ7XG4gICAgaW5pdFllYXJzKCk6IHZvaWQ7XG4gICAgaW5pdERheU5hbWVzKCk6IHZvaWQ7XG4gICAgdG9nZ2xlVmlldygpOiB2b2lkO1xuICAgIHRvZ2dsZSgpOiB2b2lkO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgcmVzZXQoZmlyZVZhbHVlQ2hhbmdlRXZlbnQ/OiBib29sZWFuKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbDogRGF0ZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICBvbkJsdXIoZTogTW91c2VFdmVudCk6IHZvaWQ7XG59XG4iXX0=