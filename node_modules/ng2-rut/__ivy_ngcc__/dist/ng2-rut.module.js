"use strict";
var core_1 = require('@angular/core');
var forms_1 = require('@angular/forms');
var rut_pipe_1 = require('./rut.pipe');
var rut_validator_1 = require('./rut.validator');
var rut_directive_1 = require('./rut.directive');
var rut_value_accessor_1 = require('./rut-value-accessor');
var rut_pipe_2 = require('./rut.pipe');
exports.RutPipe = rut_pipe_2.RutPipe;
var rut_validator_2 = require('./rut.validator');
exports.RutValidator = rut_validator_2.RutValidator;
var rut_directive_2 = require('./rut.directive');
exports.RutDirective = rut_directive_2.RutDirective;
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('./rut.pipe');
var ɵngcc2 = require('./rut.directive');
var ɵngcc3 = require('./rut.validator');
var ɵngcc4 = require('./rut-value-accessor');
var ɵngcc5 = require('@angular/forms');
var Ng2Rut = (function () {
    function Ng2Rut() {
    }
    /** @nocollapse */
    Ng2Rut.ctorParameters = function () { return []; };
Ng2Rut.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2Rut });
Ng2Rut.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2Rut_Factory(t) { return new (t || Ng2Rut)(); }, providers: [
        rut_validator_1.RutValidator,
    ], imports: [[
            forms_1.FormsModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2Rut, { declarations: [ɵngcc1.RutPipe, ɵngcc2.RutDirective, ɵngcc3.RutValidator, ɵngcc4.RutValueAccessor], imports: [ɵngcc5.FormsModule], exports: [ɵngcc1.RutPipe, ɵngcc2.RutDirective, ɵngcc3.RutValidator, ɵngcc4.RutValueAccessor] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2Rut, [{
        type: core_1.NgModule,
        args: [{
                imports: [
                    forms_1.FormsModule,
                ],
                declarations: [
                    rut_pipe_1.RutPipe,
                    rut_directive_1.RutDirective,
                    rut_validator_1.RutValidator,
                    rut_value_accessor_1.RutValueAccessor,
                ],
                providers: [
                    rut_validator_1.RutValidator,
                ],
                exports: [
                    rut_pipe_1.RutPipe,
                    rut_directive_1.RutDirective,
                    rut_validator_1.RutValidator,
                    rut_value_accessor_1.RutValueAccessor,
                ]
            }]
    }], function () { return []; }, null); })();
    return Ng2Rut;
}());
exports.Ng2Rut = Ng2Rut;

exports.RutValueAccessor = ɵngcc4.RutValueAccessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLXJ1dC5tb2R1bGUuanMiLCJzb3VyY2VzIjpbIm5nMi1ydXQubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBQ0E7QUFDQTtBQUNBLEtBc0JNO0FBQ047QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUF1RDtBQUN2RDtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgZm9ybXNfMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2Zvcm1zJyk7XG52YXIgcnV0X3BpcGVfMSA9IHJlcXVpcmUoJy4vcnV0LnBpcGUnKTtcbnZhciBydXRfdmFsaWRhdG9yXzEgPSByZXF1aXJlKCcuL3J1dC52YWxpZGF0b3InKTtcbnZhciBydXRfZGlyZWN0aXZlXzEgPSByZXF1aXJlKCcuL3J1dC5kaXJlY3RpdmUnKTtcbnZhciBydXRfdmFsdWVfYWNjZXNzb3JfMSA9IHJlcXVpcmUoJy4vcnV0LXZhbHVlLWFjY2Vzc29yJyk7XG52YXIgcnV0X3BpcGVfMiA9IHJlcXVpcmUoJy4vcnV0LnBpcGUnKTtcbmV4cG9ydHMuUnV0UGlwZSA9IHJ1dF9waXBlXzIuUnV0UGlwZTtcbnZhciBydXRfdmFsaWRhdG9yXzIgPSByZXF1aXJlKCcuL3J1dC52YWxpZGF0b3InKTtcbmV4cG9ydHMuUnV0VmFsaWRhdG9yID0gcnV0X3ZhbGlkYXRvcl8yLlJ1dFZhbGlkYXRvcjtcbnZhciBydXRfZGlyZWN0aXZlXzIgPSByZXF1aXJlKCcuL3J1dC5kaXJlY3RpdmUnKTtcbmV4cG9ydHMuUnV0RGlyZWN0aXZlID0gcnV0X2RpcmVjdGl2ZV8yLlJ1dERpcmVjdGl2ZTtcbnZhciBOZzJSdXQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5nMlJ1dCgpIHtcbiAgICB9XG4gICAgTmcyUnV0LmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogY29yZV8xLk5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3Jtc18xLkZvcm1zTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1dF9waXBlXzEuUnV0UGlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1dF9kaXJlY3RpdmVfMS5SdXREaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydXRfdmFsaWRhdG9yXzEuUnV0VmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnV0X3ZhbHVlX2FjY2Vzc29yXzEuUnV0VmFsdWVBY2Nlc3NvcixcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBydXRfdmFsaWRhdG9yXzEuUnV0VmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBydXRfcGlwZV8xLlJ1dFBpcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBydXRfZGlyZWN0aXZlXzEuUnV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnV0X3ZhbGlkYXRvcl8xLlJ1dFZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1dF92YWx1ZV9hY2Nlc3Nvcl8xLlJ1dFZhbHVlQWNjZXNzb3IsXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBOZzJSdXQuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gTmcyUnV0O1xufSgpKTtcbmV4cG9ydHMuTmcyUnV0ID0gTmcyUnV0O1xuIl19