import { ngxPrintMarkerPosition } from './ngx-print-marker-position.enum';
import { PrintItem } from './print-item';
import { TemplateRef, ComponentFactoryResolver, Injector, Type } from '@angular/core';
import { Observable } from 'rxjs';
import { PrintServiceConfig } from './print-service-config';
import * as ɵngcc0 from '@angular/core';
export declare type Content<T> = string | HTMLElement | TemplateRef<T> | Type<T>;
/**
 * Main print service
 */
export declare class NgxPrinterService {
    private resolver;
    private injector;
    private printWindowOpen;
    /**
     * @internal
     */
    private _printItems;
    $printItems: Observable<PrintItem[]>;
    private openNgxPrinter;
    /**
     * Wait time to render before open print dialog in ms
     * Default is 200
     */
    timeToWaitRender: number;
    /**
     * Class used in component when printing to current window
     */
    renderClass: string;
    /**
     * Open new window to print or not
     * Default is true
     */
    printOpenWindow: boolean;
    /**
     * Name of root component
     * Default is app-root
     */
    appRootName: string;
    /**
     * Do not fire print event - just show preview
     * Default is false
     */
    printPreviewOnly: boolean;
    appRoot: HTMLElement;
    appRootDislaySetting: string;
    $printWindowOpen: Observable<boolean>;
    eventadded: any[];
    markerPosition: ngxPrintMarkerPosition;
    constructor(config: PrintServiceConfig, resolver: ComponentFactoryResolver, injector: Injector);
    /**
     * Set config from forRoot
     * @param config
     */
    private setRootConfigOptions;
    /***
     * Print a div identified by its id
     * @example
     * this.printerService.printDiv('printDiv');
     */
    printDiv(divID: string): void;
    /***
     * Print an Element identified by its className using getElementsByClassName
     * Prints the first one found
     */
    printByClassName(className: string): void;
    /**
     * Print Angular TemplateRef or a Component or String
     * @param contentToPrint
     * @example
     * this.printerService.printAngular(this.PrintTemplateTpl);
     */
    printAngular(contentToPrint: any, context?: any): void;
    /**
     * Print single img
     * @example
     * this.printerService.printImg('assets/bratwurst.jpg');
     */
    printImg(imgSrc: string): void;
    /**
     * Print an native Element (HTML Element)
     * @param nativeElement
     * @example
     * this.printerService.printHTMLElement(this.PrintComponent.nativeElement);
     */
    printHTMLElement(nativeElement: HTMLElement): void;
    /**
     * Create and render component
     * @param contentToRender
     */
    private createComponent;
    /**
     * Main print function
     * @param printContent
     */
    private print;
    /**
     * Print using a new window / tab
     * @param divToPrint
     */
    private printInNewWindow;
    /**
     * Copy Css links to new page
     * @param printWindow
     */
    private copyCss;
    /**
     * Print window in new tab
     */
    private printTabWindow;
    /**
     * Print the whole current window
     */
    printCurrentWindow(): void;
    /**
     * Listen to print event of window
     * @param printWindow
     */
    private registerPrintEvent;
    /**
     * Close tab or clean up dom
     * @internal
     */
    private cleanUp;
    /**
     * Create node or angular component
     * @param content
     * @internal
     */
    private resolveNgContent;
    /**
     * Search for Angular App Root
     * @internal
     */
    private getAppRoot;
    /**
     * Add a new item to print
     * Used by directive
     * @internal
     * @param newPrintItem  HTML id
     */
    addPrintItem(newPrintItem: PrintItem): void;
    /**
     * Delete a print item from service
     * Used by directive
     * @internal
     * @param idOfItemToRemove
     */
    removePrintItem(idOfItemToRemove: string): void;
    /**
   * Gets a single print item from service
   * Used by directive
   * @internal
   * @param idOfItemToFind
   */
    getPrintItem(idOfItemToRemove: string): PrintItem;
    /**
     * Print a print Item
     * @param printItemToPrint
     */
    printPrintItem(printItemToPrint: PrintItem): void;
    /**
     * Print al list of print Items one after the other
     * @param printItemToPrint
     */
    printPrintItems(printItemsToPrint: PrintItem[], className?: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxPrinterService, [{ optional: true; }, null, null]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50ZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJuZ3gtcHJpbnRlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5neFByaW50TWFya2VyUG9zaXRpb24gfSBmcm9tICcuL25neC1wcmludC1tYXJrZXItcG9zaXRpb24uZW51bSc7XHJcbmltcG9ydCB7IFByaW50SXRlbSB9IGZyb20gJy4vcHJpbnQtaXRlbSc7XHJcbmltcG9ydCB7IFRlbXBsYXRlUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgUHJpbnRTZXJ2aWNlQ29uZmlnIH0gZnJvbSAnLi9wcmludC1zZXJ2aWNlLWNvbmZpZyc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgQ29udGVudDxUPiA9IHN0cmluZyB8IEhUTUxFbGVtZW50IHwgVGVtcGxhdGVSZWY8VD4gfCBUeXBlPFQ+O1xyXG4vKipcclxuICogTWFpbiBwcmludCBzZXJ2aWNlXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hQcmludGVyU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlc29sdmVyO1xyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcclxuICAgIHByaXZhdGUgcHJpbnRXaW5kb3dPcGVuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfcHJpbnRJdGVtcztcclxuICAgICRwcmludEl0ZW1zOiBPYnNlcnZhYmxlPFByaW50SXRlbVtdPjtcclxuICAgIHByaXZhdGUgb3Blbk5neFByaW50ZXI7XHJcbiAgICAvKipcclxuICAgICAqIFdhaXQgdGltZSB0byByZW5kZXIgYmVmb3JlIG9wZW4gcHJpbnQgZGlhbG9nIGluIG1zXHJcbiAgICAgKiBEZWZhdWx0IGlzIDIwMFxyXG4gICAgICovXHJcbiAgICB0aW1lVG9XYWl0UmVuZGVyOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIENsYXNzIHVzZWQgaW4gY29tcG9uZW50IHdoZW4gcHJpbnRpbmcgdG8gY3VycmVudCB3aW5kb3dcclxuICAgICAqL1xyXG4gICAgcmVuZGVyQ2xhc3M6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogT3BlbiBuZXcgd2luZG93IHRvIHByaW50IG9yIG5vdFxyXG4gICAgICogRGVmYXVsdCBpcyB0cnVlXHJcbiAgICAgKi9cclxuICAgIHByaW50T3BlbldpbmRvdzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogTmFtZSBvZiByb290IGNvbXBvbmVudFxyXG4gICAgICogRGVmYXVsdCBpcyBhcHAtcm9vdFxyXG4gICAgICovXHJcbiAgICBhcHBSb290TmFtZTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEbyBub3QgZmlyZSBwcmludCBldmVudCAtIGp1c3Qgc2hvdyBwcmV2aWV3XHJcbiAgICAgKiBEZWZhdWx0IGlzIGZhbHNlXHJcbiAgICAgKi9cclxuICAgIHByaW50UHJldmlld09ubHk6IGJvb2xlYW47XHJcbiAgICBhcHBSb290OiBIVE1MRWxlbWVudDtcclxuICAgIGFwcFJvb3REaXNsYXlTZXR0aW5nOiBzdHJpbmc7XHJcbiAgICAkcHJpbnRXaW5kb3dPcGVuOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgZXZlbnRhZGRlZDogYW55W107XHJcbiAgICBtYXJrZXJQb3NpdGlvbjogbmd4UHJpbnRNYXJrZXJQb3NpdGlvbjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogUHJpbnRTZXJ2aWNlQ29uZmlnLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBpbmplY3RvcjogSW5qZWN0b3IpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgY29uZmlnIGZyb20gZm9yUm9vdFxyXG4gICAgICogQHBhcmFtIGNvbmZpZ1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldFJvb3RDb25maWdPcHRpb25zO1xyXG4gICAgLyoqKlxyXG4gICAgICogUHJpbnQgYSBkaXYgaWRlbnRpZmllZCBieSBpdHMgaWRcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB0aGlzLnByaW50ZXJTZXJ2aWNlLnByaW50RGl2KCdwcmludERpdicpO1xyXG4gICAgICovXHJcbiAgICBwcmludERpdihkaXZJRDogc3RyaW5nKTogdm9pZDtcclxuICAgIC8qKipcclxuICAgICAqIFByaW50IGFuIEVsZW1lbnQgaWRlbnRpZmllZCBieSBpdHMgY2xhc3NOYW1lIHVzaW5nIGdldEVsZW1lbnRzQnlDbGFzc05hbWVcclxuICAgICAqIFByaW50cyB0aGUgZmlyc3Qgb25lIGZvdW5kXHJcbiAgICAgKi9cclxuICAgIHByaW50QnlDbGFzc05hbWUoY2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCBBbmd1bGFyIFRlbXBsYXRlUmVmIG9yIGEgQ29tcG9uZW50IG9yIFN0cmluZ1xyXG4gICAgICogQHBhcmFtIGNvbnRlbnRUb1ByaW50XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdGhpcy5wcmludGVyU2VydmljZS5wcmludEFuZ3VsYXIodGhpcy5QcmludFRlbXBsYXRlVHBsKTtcclxuICAgICAqL1xyXG4gICAgcHJpbnRBbmd1bGFyKGNvbnRlbnRUb1ByaW50OiBhbnksIGNvbnRleHQ/OiBhbnkpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCBzaW5nbGUgaW1nXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdGhpcy5wcmludGVyU2VydmljZS5wcmludEltZygnYXNzZXRzL2JyYXR3dXJzdC5qcGcnKTtcclxuICAgICAqL1xyXG4gICAgcHJpbnRJbWcoaW1nU3JjOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCBhbiBuYXRpdmUgRWxlbWVudCAoSFRNTCBFbGVtZW50KVxyXG4gICAgICogQHBhcmFtIG5hdGl2ZUVsZW1lbnRcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB0aGlzLnByaW50ZXJTZXJ2aWNlLnByaW50SFRNTEVsZW1lbnQodGhpcy5QcmludENvbXBvbmVudC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAqL1xyXG4gICAgcHJpbnRIVE1MRWxlbWVudChuYXRpdmVFbGVtZW50OiBIVE1MRWxlbWVudCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhbmQgcmVuZGVyIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRUb1JlbmRlclxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZUNvbXBvbmVudDtcclxuICAgIC8qKlxyXG4gICAgICogTWFpbiBwcmludCBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHByaW50Q29udGVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHByaW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCB1c2luZyBhIG5ldyB3aW5kb3cgLyB0YWJcclxuICAgICAqIEBwYXJhbSBkaXZUb1ByaW50XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJpbnRJbk5ld1dpbmRvdztcclxuICAgIC8qKlxyXG4gICAgICogQ29weSBDc3MgbGlua3MgdG8gbmV3IHBhZ2VcclxuICAgICAqIEBwYXJhbSBwcmludFdpbmRvd1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNvcHlDc3M7XHJcbiAgICAvKipcclxuICAgICAqIFByaW50IHdpbmRvdyBpbiBuZXcgdGFiXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJpbnRUYWJXaW5kb3c7XHJcbiAgICAvKipcclxuICAgICAqIFByaW50IHRoZSB3aG9sZSBjdXJyZW50IHdpbmRvd1xyXG4gICAgICovXHJcbiAgICBwcmludEN1cnJlbnRXaW5kb3coKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogTGlzdGVuIHRvIHByaW50IGV2ZW50IG9mIHdpbmRvd1xyXG4gICAgICogQHBhcmFtIHByaW50V2luZG93XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVnaXN0ZXJQcmludEV2ZW50O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSB0YWIgb3IgY2xlYW4gdXAgZG9tXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjbGVhblVwO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgbm9kZSBvciBhbmd1bGFyIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHJlc29sdmVOZ0NvbnRlbnQ7XHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaCBmb3IgQW5ndWxhciBBcHAgUm9vdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QXBwUm9vdDtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGl0ZW0gdG8gcHJpbnRcclxuICAgICAqIFVzZWQgYnkgZGlyZWN0aXZlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSBuZXdQcmludEl0ZW0gIEhUTUwgaWRcclxuICAgICAqL1xyXG4gICAgYWRkUHJpbnRJdGVtKG5ld1ByaW50SXRlbTogUHJpbnRJdGVtKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlIGEgcHJpbnQgaXRlbSBmcm9tIHNlcnZpY2VcclxuICAgICAqIFVzZWQgYnkgZGlyZWN0aXZlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqIEBwYXJhbSBpZE9mSXRlbVRvUmVtb3ZlXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVByaW50SXRlbShpZE9mSXRlbVRvUmVtb3ZlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICogR2V0cyBhIHNpbmdsZSBwcmludCBpdGVtIGZyb20gc2VydmljZVxyXG4gICAqIFVzZWQgYnkgZGlyZWN0aXZlXHJcbiAgICogQGludGVybmFsXHJcbiAgICogQHBhcmFtIGlkT2ZJdGVtVG9GaW5kXHJcbiAgICovXHJcbiAgICBnZXRQcmludEl0ZW0oaWRPZkl0ZW1Ub1JlbW92ZTogc3RyaW5nKTogUHJpbnRJdGVtO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCBhIHByaW50IEl0ZW1cclxuICAgICAqIEBwYXJhbSBwcmludEl0ZW1Ub1ByaW50XHJcbiAgICAgKi9cclxuICAgIHByaW50UHJpbnRJdGVtKHByaW50SXRlbVRvUHJpbnQ6IFByaW50SXRlbSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFByaW50IGFsIGxpc3Qgb2YgcHJpbnQgSXRlbXMgb25lIGFmdGVyIHRoZSBvdGhlclxyXG4gICAgICogQHBhcmFtIHByaW50SXRlbVRvUHJpbnRcclxuICAgICAqL1xyXG4gICAgcHJpbnRQcmludEl0ZW1zKHByaW50SXRlbXNUb1ByaW50OiBQcmludEl0ZW1bXSwgY2xhc3NOYW1lPzogc3RyaW5nKTogdm9pZDtcclxufVxyXG4iXX0=