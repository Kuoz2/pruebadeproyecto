import { ngxPrintMarkerPosition } from './ngx-print-marker-position.enum';
import { PrintItem } from './print-item';
import { TemplateRef, ComponentFactoryResolver, Injector, Type } from '@angular/core';
import { Observable } from 'rxjs';
import { PrintServiceConfig } from './print-service-config';
export declare type Content<T> = string | HTMLElement | TemplateRef<T> | Type<T>;
/**
 * Main print service
 */
export declare class NgxPrinterService {
    private resolver;
    private injector;
    private printWindowOpen;
    /**
     * @internal
     */
    private _printItems;
    $printItems: Observable<PrintItem[]>;
    private openNgxPrinter;
    /**
     * Wait time to render before open print dialog in ms
     * Default is 200
     */
    timeToWaitRender: number;
    /**
     * Class used in component when printing to current window
     */
    renderClass: string;
    /**
     * Open new window to print or not
     * Default is true
     */
    printOpenWindow: boolean;
    /**
     * Name of root component
     * Default is app-root
     */
    appRootName: string;
    /**
     * Do not fire print event - just show preview
     * Default is false
     */
    printPreviewOnly: boolean;
    appRoot: HTMLElement;
    appRootDislaySetting: string;
    $printWindowOpen: Observable<boolean>;
    eventadded: any[];
    markerPosition: ngxPrintMarkerPosition;
    constructor(config: PrintServiceConfig, resolver: ComponentFactoryResolver, injector: Injector);
    /**
     * Set config from forRoot
     * @param config
     */
    private setRootConfigOptions;
    /***
     * Print a div identified by its id
     * @example
     * this.printerService.printDiv('printDiv');
     */
    printDiv(divID: string): void;
    /***
     * Print an Element identified by its className using getElementsByClassName
     * Prints the first one found
     */
    printByClassName(className: string): void;
    /**
     * Print Angular TemplateRef or a Component or String
     * @param contentToPrint
     * @example
     * this.printerService.printAngular(this.PrintTemplateTpl);
     */
    printAngular(contentToPrint: any, context?: any): void;
    /**
     * Print single img
     * @example
     * this.printerService.printImg('assets/bratwurst.jpg');
     */
    printImg(imgSrc: string): void;
    /**
     * Print an native Element (HTML Element)
     * @param nativeElement
     * @example
     * this.printerService.printHTMLElement(this.PrintComponent.nativeElement);
     */
    printHTMLElement(nativeElement: HTMLElement): void;
    /**
     * Create and render component
     * @param contentToRender
     */
    private createComponent;
    /**
     * Main print function
     * @param printContent
     */
    private print;
    /**
     * Print using a new window / tab
     * @param divToPrint
     */
    private printInNewWindow;
    /**
     * Copy Css links to new page
     * @param printWindow
     */
    private copyCss;
    /**
     * Print window in new tab
     */
    private printTabWindow;
    /**
     * Print the whole current window
     */
    printCurrentWindow(): void;
    /**
     * Listen to print event of window
     * @param printWindow
     */
    private registerPrintEvent;
    /**
     * Close tab or clean up dom
     * @internal
     */
    private cleanUp;
    /**
     * Create node or angular component
     * @param content
     * @internal
     */
    private resolveNgContent;
    /**
     * Search for Angular App Root
     * @internal
     */
    private getAppRoot;
    /**
     * Add a new item to print
     * Used by directive
     * @internal
     * @param newPrintItem  HTML id
     */
    addPrintItem(newPrintItem: PrintItem): void;
    /**
     * Delete a print item from service
     * Used by directive
     * @internal
     * @param idOfItemToRemove
     */
    removePrintItem(idOfItemToRemove: string): void;
    /**
   * Gets a single print item from service
   * Used by directive
   * @internal
   * @param idOfItemToFind
   */
    getPrintItem(idOfItemToRemove: string): PrintItem;
    /**
     * Print a print Item
     * @param printItemToPrint
     */
    printPrintItem(printItemToPrint: PrintItem): void;
    /**
     * Print al list of print Items one after the other
     * @param printItemToPrint
     */
    printPrintItems(printItemsToPrint: PrintItem[], className?: string): void;
}
