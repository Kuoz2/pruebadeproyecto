import { Component, Renderer2, ElementRef, Output, EventEmitter } from '@angular/core';
/**
 * Component used to render content when printed to current window
 */
export class NgxPrinterComponent {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._renderClass = 'default';
        /**
         * Display single image
         */
        this._imgSrc = 'default';
        this.completed = new EventEmitter();
    }
    get renderClass() {
        return this._renderClass;
    }
    set renderClass(value) {
        this._renderClass = value;
        this.setCustomClass();
    }
    get imgSrc() {
        return this._imgSrc;
    }
    set imgSrc(value) {
        this._imgSrc = value;
        this.addImage(this._imgSrc);
    }
    ngOnInit() { }
    /**
     * Attach custom class to element
     */
    setCustomClass() {
        const natElement = this.elementRef.nativeElement;
        this.renderer.removeClass(natElement, 'default');
        this.renderer.addClass(natElement, this._renderClass);
    }
    /**
     * Add custom image
     * @param source
     */
    addImage(source) {
        const natElement = this.elementRef.nativeElement;
        const newImgElement = this.renderer.createElement('img');
        this.renderer.setAttribute(newImgElement, 'src', source);
        this.renderer.listen(newImgElement, 'load', (evt) => {
            console.log('loading completed', evt);
            this.completed.emit(true);
        });
        this.renderer.appendChild(natElement, newImgElement);
    }
}
NgxPrinterComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-printer',
                template: `
    <ng-content></ng-content>
  `,
                styles: [":host.default{background-color:#fff;height:100%;left:0;margin:0;position:fixed;top:0;width:100%;z-index:1000000}"]
            },] }
];
NgxPrinterComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrinterComponent.propDecorators = {
    completed: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXByaW50ZXIvc3JjL2xpYi9uZ3gtcHJpbnRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxTQUFTLEVBQ1QsVUFBVSxFQUNWLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFFdkI7O0dBRUc7QUFRSCxNQUFNLE9BQU8sbUJBQW1CO0lBeUI5QixZQUFvQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBdkIvRCxpQkFBWSxHQUFHLFNBQVMsQ0FBQztRQVNqQzs7V0FFRztRQUNLLFlBQU8sR0FBRyxTQUFTLENBQUM7UUFTbEIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7SUFFd0IsQ0FBQztJQXRCM0UsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBQ0QsSUFBVyxXQUFXLENBQUMsS0FBSztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQU1ELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBVyxNQUFNLENBQUMsS0FBSztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBTUQsUUFBUSxLQUFJLENBQUM7SUFFYjs7T0FFRztJQUNLLGNBQWM7UUFDcEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFFakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFFBQVEsQ0FBQyxNQUFjO1FBQzdCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1FBRWpELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBOURGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOztHQUVUOzthQUVGOzs7WUFkQyxVQUFVO1lBRFYsU0FBUzs7O3dCQXVDUixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsXHJcbiAgT25Jbml0LFxyXG4gIFJlbmRlcmVyMixcclxuICBFbGVtZW50UmVmLFxyXG4gIE91dHB1dCxcclxuICBFdmVudEVtaXR0ZXJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdXNlZCB0byByZW5kZXIgY29udGVudCB3aGVuIHByaW50ZWQgdG8gY3VycmVudCB3aW5kb3dcclxuICovXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXByaW50ZXInLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgYCxcclxuICBzdHlsZVVybHM6IFsnLi9uZ3gtcHJpbnRlci5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByaW50ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICBwcml2YXRlIF9yZW5kZXJDbGFzcyA9ICdkZWZhdWx0JztcclxuICBwdWJsaWMgZ2V0IHJlbmRlckNsYXNzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlckNsYXNzO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IHJlbmRlckNsYXNzKHZhbHVlKSB7XHJcbiAgICB0aGlzLl9yZW5kZXJDbGFzcyA9IHZhbHVlO1xyXG4gICAgdGhpcy5zZXRDdXN0b21DbGFzcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGlzcGxheSBzaW5nbGUgaW1hZ2VcclxuICAgKi9cclxuICBwcml2YXRlIF9pbWdTcmMgPSAnZGVmYXVsdCc7XHJcbiAgcHVibGljIGdldCBpbWdTcmMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW1nU3JjO1xyXG4gIH1cclxuICBwdWJsaWMgc2V0IGltZ1NyYyh2YWx1ZSkge1xyXG4gICAgdGhpcy5faW1nU3JjID0gdmFsdWU7XHJcbiAgICB0aGlzLmFkZEltYWdlKHRoaXMuX2ltZ1NyYyk7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KCkgY29tcGxldGVkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cclxuXHJcbiAgbmdPbkluaXQoKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBBdHRhY2ggY3VzdG9tIGNsYXNzIHRvIGVsZW1lbnRcclxuICAgKi9cclxuICBwcml2YXRlIHNldEN1c3RvbUNsYXNzKCkge1xyXG4gICAgY29uc3QgbmF0RWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MobmF0RWxlbWVudCwgJ2RlZmF1bHQnKTtcclxuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MobmF0RWxlbWVudCwgdGhpcy5fcmVuZGVyQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGN1c3RvbSBpbWFnZVxyXG4gICAqIEBwYXJhbSBzb3VyY2UgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBhZGRJbWFnZShzb3VyY2U6IHN0cmluZykge1xyXG4gICAgY29uc3QgbmF0RWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IG5ld0ltZ0VsZW1lbnQgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUobmV3SW1nRWxlbWVudCwgJ3NyYycsIHNvdXJjZSk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5saXN0ZW4obmV3SW1nRWxlbWVudCwgJ2xvYWQnLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdsb2FkaW5nIGNvbXBsZXRlZCcsIGV2dCk7XHJcbiAgICAgIHRoaXMuY29tcGxldGVkLmVtaXQodHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKG5hdEVsZW1lbnQsIG5ld0ltZ0VsZW1lbnQpO1xyXG4gIH1cclxufVxyXG4iXX0=