import { Injectable, TemplateRef, ComponentFactoryResolver, Injector, Optional } from '@angular/core';
import { NgxPrinterComponent } from './ngx-printer.component';
import { BehaviorSubject } from 'rxjs';
import { PrintServiceConfig } from './print-service-config';
import * as i0 from "@angular/core";
import * as i1 from "./print-service-config";
/**
 * Main print service
 */
export class NgxPrinterService {
    constructor(config, resolver, injector) {
        this.resolver = resolver;
        this.injector = injector;
        this.printWindowOpen = new BehaviorSubject(false);
        /**
         * @internal
         */
        this._printItems = new BehaviorSubject([]);
        this.$printItems = this._printItems.asObservable();
        /**
         * Wait time to render before open print dialog in ms
         * Default is 200
         */
        this.timeToWaitRender = 200;
        /**
         * Class used in component when printing to current window
         */
        this.renderClass = 'default';
        /**
         * Open new window to print or not
         * Default is true
         */
        this.printOpenWindow = true;
        /**
         * Name of root component
         * Default is app-root
         */
        this.appRootName = 'app-root';
        /**
         * Do not fire print event - just show preview
         * Default is false
         */
        this.printPreviewOnly = false;
        this.appRootDislaySetting = '';
        this.$printWindowOpen = this.printWindowOpen.asObservable();
        this.eventadded = [];
        this.setRootConfigOptions(config);
    }
    /**
     * Set config from forRoot
     * @param config
     */
    setRootConfigOptions(config) {
        if (config) {
            if (config.printOpenWindow) {
                this.printOpenWindow = config.printOpenWindow;
            }
            if (config.timeToWaitRender) {
                this.timeToWaitRender = config.timeToWaitRender;
            }
            if (config.renderClass) {
                this.renderClass = config.renderClass;
            }
            if (config.appRootName) {
                this.appRootName = config.appRootName;
            }
            if (config.markerPosition) {
                this.markerPosition = config.markerPosition;
            }
            if (config.printPreviewOnly) {
                this.printPreviewOnly = config.printPreviewOnly;
            }
        }
    }
    /***
     * Print a div identified by its id
     * @example
     * this.printerService.printDiv('printDiv');
     */
    printDiv(divID) {
        const divToPrint = document.getElementById(divID);
        if (divToPrint) {
            this.print(divToPrint, this.printOpenWindow);
        }
        else {
            console.log(`div with id ${divID} not found..`);
        }
    }
    /***
     * Print an Element identified by its className using getElementsByClassName
     * Prints the first one found
     */
    printByClassName(className) {
        const elementToPrint = document.getElementsByClassName(className);
        if (elementToPrint && elementToPrint.length > 0) {
            this.print(elementToPrint[0], this.printOpenWindow);
        }
        else {
            console.log('element with id ${className} not found..');
        }
    }
    /**
     * Print Angular TemplateRef or a Component or String
     * @param contentToPrint
     * @example
     * this.printerService.printAngular(this.PrintTemplateTpl);
     */
    printAngular(contentToPrint, context) {
        const nativeEl = this.createComponent(contentToPrint, null, context);
        this.print(nativeEl.nativeElement, this.printOpenWindow);
    }
    /**
     * Print single img
     * @example
     * this.printerService.printImg('assets/bratwurst.jpg');
     */
    printImg(imgSrc) {
        const compRef = this.createComponent(null, imgSrc);
        const openNewWindow = this.printOpenWindow;
        compRef.instance.completed.subscribe(val => {
            compRef.hostView.detectChanges();
            console.log('completed:', val);
            this.print(compRef.location.nativeElement, openNewWindow);
        });
    }
    /**
     * Print an native Element (HTML Element)
     * @param nativeElement
     * @example
     * this.printerService.printHTMLElement(this.PrintComponent.nativeElement);
     */
    printHTMLElement(nativeElement) {
        this.print(nativeElement, this.printOpenWindow);
    }
    /**
     * Create and render component
     * @param contentToRender
     */
    createComponent(contentToRender, imgSrc, context) {
        // this.viewContainerRef.clear();
        const factory = this.resolver.resolveComponentFactory(NgxPrinterComponent);
        let componentRef;
        if (contentToRender) {
            if (context === undefined) {
                context = null;
            }
            const ngContent = this.resolveNgContent(contentToRender, context);
            componentRef = factory.create(this.injector, ngContent); // this.viewContainerRef.createComponent(factory);
        }
        else {
            componentRef = factory.create(this.injector);
        }
        componentRef.instance.renderClass = this.renderClass;
        if (imgSrc) {
            componentRef.instance.imgSrc = imgSrc;
            return componentRef;
        }
        componentRef.hostView.detectChanges();
        return componentRef.location; // location is native element
    }
    /**
     * Main print function
     * @param printContent
     */
    print(printContent, printOpenWindow) {
        if (printOpenWindow === true) {
            const printContentClone = document.importNode(printContent, true); // printContent.cloneNode(true);
            this.printInNewWindow(printContentClone);
        }
        if (printOpenWindow === false) {
            const printContentClone = document.importNode(printContent, true); // printContent.cloneNode(true);
            const nativeEl = this.createComponent(printContentClone).nativeElement;
            this.openNgxPrinter = nativeEl;
            document.body.appendChild(this.openNgxPrinter);
            // window.scrollTo(0, 0);
            this.getAppRoot();
            if (this.appRoot) {
                this.appRoot.style.display = 'none';
            }
            this.printCurrentWindow();
        }
    }
    /**
     * Print using a new window / tab
     * @param divToPrint
     */
    printInNewWindow(divToPrint) {
        const printWindow = window.open('', 'PRINT');
        const title = document.title;
        printWindow.document.write('<HTML><HEAD><TITLE>' + title + '</TITLE></HEAD><BODY></BODY></HTML>');
        // printWindow.document.write(document.documentElement.innerHTML);
        const printWindowDoc = printWindow.document;
        this.copyCss(printWindowDoc);
        printWindowDoc.body.style.margin = '0 0';
        printWindowDoc.body.appendChild(divToPrint);
        printWindow.document.close();
        // printWindowDoc.body.innerHTML = divToPrint.outerHTML;
        setTimeout(() => this.printTabWindow(printWindow, printWindowDoc), this.timeToWaitRender);
    }
    /**
     * Copy Css links to new page
     * @param printWindow
     */
    copyCss(printWindowDoc) {
        const links = document.querySelectorAll('link');
        const styles = document.querySelectorAll('style');
        const targetHead = printWindowDoc.getElementsByTagName('head')[0];
        links.forEach(link => {
            targetHead.appendChild(document.importNode(link, true));
        });
        styles.forEach(style => {
            targetHead.appendChild(document.importNode(style, true));
        });
    }
    /**
     * Print window in new tab
     */
    printTabWindow(printWindow, printWindowDoc) {
        if (this.printPreviewOnly) {
            return;
        }
        this.registerPrintEvent(printWindow, true);
        this.printWindowOpen.next(true);
        printWindow.focus(); // necessary for IE >= 10*/
        if (printWindowDoc.execCommand('print') === false) {
            printWindow.print();
        }
    }
    /**
     * Print the whole current window
     */
    printCurrentWindow() {
        if (this.printPreviewOnly) {
            return;
        }
        this.registerPrintEvent(window, false);
        setTimeout(() => {
            this.printWindowOpen.next(true);
            if (document.execCommand('print') === false) {
                window.print();
            }
        }, this.timeToWaitRender);
    }
    /**
     * Listen to print event of window
     * @param printWindow
     */
    registerPrintEvent(printWindow, printWithOpenInNewWindow) {
        const that = this;
        printWindow.focus(); // necessary for IE >= 10*/
        if (that.eventadded[printWindow.name]) {
            return;
        }
        printWindow.addEventListener('afterprint', () => {
            this.eventadded[printWindow.name] = true;
            // console.log('afterprint');
            if (printWithOpenInNewWindow) {
                that.eventadded[printWindow.name] = false;
            }
            that.cleanUp(printWindow, printWithOpenInNewWindow);
            that.printWindowOpen.next(false);
        });
    }
    /**
     * Close tab or clean up dom
     * @internal
     */
    cleanUp(printWindow, printOpenWindow) {
        if (printOpenWindow === true) {
            console.log('close print window');
            printWindow.close();
            setTimeout(() => {
                printWindow.close();
            }, 20);
        }
        if (printOpenWindow === false) {
            if (!this.openNgxPrinter) {
                return;
            }
            if (document.body.getElementsByTagName('ngx-printer').length === 0) {
                return;
            }
            if (this.appRoot) {
                if (this.appRootDislaySetting !== '') {
                    this.appRoot.style.display = this.appRootDislaySetting;
                }
                else {
                    this.appRoot.style.display = '';
                }
            }
            document.body.removeChild(this.openNgxPrinter);
            this.openNgxPrinter = null;
        }
    }
    /**
     * Create node or angular component
     * @param content
     * @internal
     */
    resolveNgContent(content, context) {
        if (typeof content === 'string') {
            const element = document.createTextNode(content);
            return [[element]];
        }
        if (content instanceof TemplateRef) {
            const viewRef = content.createEmbeddedView(context);
            viewRef.detectChanges();
            return [viewRef.rootNodes];
        }
        if (content instanceof HTMLElement) {
            return [[content]];
        }
        /** Otherwise it's a component */
        const factory = this.resolver.resolveComponentFactory(content);
        const componentRef = factory.create(this.injector);
        componentRef.changeDetectorRef.detectChanges();
        return [[componentRef.location.nativeElement]];
    }
    /**
     * Search for Angular App Root
     * @internal
     */
    getAppRoot() {
        const appRoot = document.body.getElementsByTagName(this.appRootName);
        if (appRoot.length === 0) {
            return null;
        }
        else {
            this.appRoot = appRoot[0];
            this.appRootDislaySetting = this.appRoot.style.display;
        }
    }
    /**
     * Add a new item to print
     * Used by directive
     * @internal
     * @param newPrintItem  HTML id
     */
    addPrintItem(newPrintItem) {
        const tmpItems = this._printItems.getValue();
        tmpItems.push(newPrintItem);
        this._printItems.next(tmpItems);
    }
    /**
     * Delete a print item from service
     * Used by directive
     * @internal
     * @param idOfItemToRemove
     */
    removePrintItem(idOfItemToRemove) {
        const tmpItems = this._printItems.getValue();
        const newIitems = tmpItems.filter(item => item.id !== idOfItemToRemove);
        this._printItems.next(newIitems);
    }
    /**
   * Gets a single print item from service
   * Used by directive
   * @internal
   * @param idOfItemToFind
   */
    getPrintItem(idOfItemToRemove) {
        const tmpItems = this._printItems.getValue();
        const foundItem = tmpItems.find(item => item.id === idOfItemToRemove);
        return foundItem;
    }
    /**
     * Print a print Item
     * @param printItemToPrint
     */
    printPrintItem(printItemToPrint) {
        this.printHTMLElement(printItemToPrint.nativeElement);
    }
    /**
     * Print al list of print Items one after the other
     * @param printItemToPrint
     */
    printPrintItems(printItemsToPrint, className) {
        const newDiv = document.createElement('div');
        if (className) {
            newDiv.classList.add(className);
        }
        else {
            newDiv.style.display = 'flex';
            newDiv.style.flexDirection = 'column';
        }
        printItemsToPrint.forEach(element => {
            newDiv.appendChild(element.nativeElement.cloneNode(true));
        });
        this.printHTMLElement(newDiv);
    }
}
NgxPrinterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxPrinterService_Factory() { return new NgxPrinterService(i0.ɵɵinject(i1.PrintServiceConfig, 8), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.INJECTOR)); }, token: NgxPrinterService, providedIn: "root" });
NgxPrinterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgxPrinterService.ctorParameters = () => [
    { type: PrintServiceConfig, decorators: [{ type: Optional }] },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByaW50ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1wcmludGVyL3NyYy9saWIvbmd4LXByaW50ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLFdBQVcsRUFDWCx3QkFBd0IsRUFDeEIsUUFBUSxFQUNSLFFBQVEsRUFFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7QUFJNUQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8saUJBQWlCO0lBZ0Q1QixZQUNjLE1BQTBCLEVBQzlCLFFBQWtDLEVBQ2xDLFFBQWtCO1FBRGxCLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFsRHBCLG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFFOUQ7O1dBRUc7UUFDSyxnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFjLEVBQUUsQ0FBQyxDQUFDO1FBQzNELGdCQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUk5Qzs7O1dBR0c7UUFDSCxxQkFBZ0IsR0FBRyxHQUFHLENBQUM7UUFFdkI7O1dBRUc7UUFDSCxnQkFBVyxHQUFHLFNBQVMsQ0FBQztRQUV4Qjs7O1dBR0c7UUFDSCxvQkFBZSxHQUFHLElBQUksQ0FBQztRQUV2Qjs7O1dBR0c7UUFDSCxnQkFBVyxHQUFHLFVBQVUsQ0FBQztRQUV6Qjs7O1dBR0c7UUFDSCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFHekIseUJBQW9CLEdBQUcsRUFBRSxDQUFDO1FBRTFCLHFCQUFn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O1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZUFBZSxDQUFDLGlCQUE4QixFQUFFLFNBQWtCO1FBQ3ZFLE1BQU0sTUFBTSxHQUFtQixRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdELElBQUksU0FBUyxFQUFFO1lBQ2IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDakM7YUFBTTtZQUNMLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztZQUM5QixNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUM7U0FDdkM7UUFFRCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUMsQ0FBQyxDQUFDO1FBR0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7WUEzYkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFUUSxrQkFBa0IsdUJBMkR0QixRQUFRO1lBbEVYLHdCQUF3QjtZQUN4QixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbmd4UHJpbnRNYXJrZXJQb3NpdGlvbiB9IGZyb20gJy4vbmd4LXByaW50LW1hcmtlci1wb3NpdGlvbi5lbnVtJztcclxuaW1wb3J0IHsgUHJpbnRJdGVtIH0gZnJvbSAnLi9wcmludC1pdGVtJztcclxuaW1wb3J0IHtcclxuICBJbmplY3RhYmxlLFxyXG4gIFRlbXBsYXRlUmVmLFxyXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICBJbmplY3RvcixcclxuICBPcHRpb25hbCxcclxuICBUeXBlXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5neFByaW50ZXJDb21wb25lbnQgfSBmcm9tICcuL25neC1wcmludGVyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBQcmludFNlcnZpY2VDb25maWcgfSBmcm9tICcuL3ByaW50LXNlcnZpY2UtY29uZmlnJztcclxuXHJcbmV4cG9ydCB0eXBlIENvbnRlbnQ8VD4gPSBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IFRlbXBsYXRlUmVmPFQ+IHwgVHlwZTxUPjtcclxuXHJcbi8qKlxyXG4gKiBNYWluIHByaW50IHNlcnZpY2VcclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByaW50ZXJTZXJ2aWNlIHtcclxuICBwcml2YXRlIHByaW50V2luZG93T3BlbiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAvKipcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwcml2YXRlIF9wcmludEl0ZW1zID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQcmludEl0ZW1bXT4oW10pO1xyXG4gICRwcmludEl0ZW1zID0gdGhpcy5fcHJpbnRJdGVtcy5hc09ic2VydmFibGUoKTtcclxuXHJcbiAgcHJpdmF0ZSBvcGVuTmd4UHJpbnRlcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIFdhaXQgdGltZSB0byByZW5kZXIgYmVmb3JlIG9wZW4gcHJpbnQgZGlhbG9nIGluIG1zXHJcbiAgICogRGVmYXVsdCBpcyAyMDBcclxuICAgKi9cclxuICB0aW1lVG9XYWl0UmVuZGVyID0gMjAwO1xyXG5cclxuICAvKipcclxuICAgKiBDbGFzcyB1c2VkIGluIGNvbXBvbmVudCB3aGVuIHByaW50aW5nIHRvIGN1cnJlbnQgd2luZG93XHJcbiAgICovXHJcbiAgcmVuZGVyQ2xhc3MgPSAnZGVmYXVsdCc7XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW4gbmV3IHdpbmRvdyB0byBwcmludCBvciBub3RcclxuICAgKiBEZWZhdWx0IGlzIHRydWVcclxuICAgKi9cclxuICBwcmludE9wZW5XaW5kb3cgPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBOYW1lIG9mIHJvb3QgY29tcG9uZW50XHJcbiAgICogRGVmYXVsdCBpcyBhcHAtcm9vdFxyXG4gICAqL1xyXG4gIGFwcFJvb3ROYW1lID0gJ2FwcC1yb290JztcclxuXHJcbiAgLyoqXHJcbiAgICogRG8gbm90IGZpcmUgcHJpbnQgZXZlbnQgLSBqdXN0IHNob3cgcHJldmlld1xyXG4gICAqIERlZmF1bHQgaXMgZmFsc2VcclxuICAgKi9cclxuICBwcmludFByZXZpZXdPbmx5ID0gZmFsc2U7XHJcblxyXG4gIGFwcFJvb3Q6IEhUTUxFbGVtZW50O1xyXG4gIGFwcFJvb3REaXNsYXlTZXR0aW5nID0gJyc7XHJcblxyXG4gICRwcmludFdpbmRvd09wZW4gPSB0aGlzLnByaW50V2luZG93T3Blbi5hc09ic2VydmFibGUoKTtcclxuICBldmVudGFkZGVkID0gW107XHJcbiAgbWFya2VyUG9zaXRpb246IG5neFByaW50TWFya2VyUG9zaXRpb247XHJcblxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpIGNvbmZpZzogUHJpbnRTZXJ2aWNlQ29uZmlnLFxyXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcclxuICApIHtcclxuICAgIHRoaXMuc2V0Um9vdENvbmZpZ09wdGlvbnMoY29uZmlnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBjb25maWcgZnJvbSBmb3JSb290XHJcbiAgICogQHBhcmFtIGNvbmZpZ1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0Um9vdENvbmZpZ09wdGlvbnMoY29uZmlnOiBQcmludFNlcnZpY2VDb25maWcpOiB2b2lkIHtcclxuICAgIGlmIChjb25maWcpIHtcclxuICAgICAgaWYgKGNvbmZpZy5wcmludE9wZW5XaW5kb3cpIHtcclxuICAgICAgICB0aGlzLnByaW50T3BlbldpbmRvdyA9IGNvbmZpZy5wcmludE9wZW5XaW5kb3c7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy50aW1lVG9XYWl0UmVuZGVyKSB7XHJcbiAgICAgICAgdGhpcy50aW1lVG9XYWl0UmVuZGVyID0gY29uZmlnLnRpbWVUb1dhaXRSZW5kZXI7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy5yZW5kZXJDbGFzcykge1xyXG4gICAgICAgIHRoaXMucmVuZGVyQ2xhc3MgPSBjb25maWcucmVuZGVyQ2xhc3M7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy5hcHBSb290TmFtZSkge1xyXG4gICAgICAgIHRoaXMuYXBwUm9vdE5hbWUgPSBjb25maWcuYXBwUm9vdE5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy5tYXJrZXJQb3NpdGlvbikge1xyXG4gICAgICAgIHRoaXMubWFya2VyUG9zaXRpb24gPSBjb25maWcubWFya2VyUG9zaXRpb247XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNvbmZpZy5wcmludFByZXZpZXdPbmx5KSB7XHJcbiAgICAgICAgdGhpcy5wcmludFByZXZpZXdPbmx5ID0gY29uZmlnLnByaW50UHJldmlld09ubHk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKipcclxuICAgKiBQcmludCBhIGRpdiBpZGVudGlmaWVkIGJ5IGl0cyBpZFxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogdGhpcy5wcmludGVyU2VydmljZS5wcmludERpdigncHJpbnREaXYnKTtcclxuICAgKi9cclxuICBwdWJsaWMgcHJpbnREaXYoZGl2SUQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgZGl2VG9QcmludCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRpdklEKTtcclxuXHJcbiAgICBpZiAoZGl2VG9QcmludCkge1xyXG4gICAgICB0aGlzLnByaW50KGRpdlRvUHJpbnQsIHRoaXMucHJpbnRPcGVuV2luZG93KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGBkaXYgd2l0aCBpZCAke2RpdklEfSBub3QgZm91bmQuLmApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqKlxyXG4gICAqIFByaW50IGFuIEVsZW1lbnQgaWRlbnRpZmllZCBieSBpdHMgY2xhc3NOYW1lIHVzaW5nIGdldEVsZW1lbnRzQnlDbGFzc05hbWVcclxuICAgKiBQcmludHMgdGhlIGZpcnN0IG9uZSBmb3VuZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmludEJ5Q2xhc3NOYW1lKGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBlbGVtZW50VG9QcmludCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudFRvUHJpbnQgJiYgZWxlbWVudFRvUHJpbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aGlzLnByaW50KDxIVE1MU2NyaXB0RWxlbWVudD5lbGVtZW50VG9QcmludFswXSwgdGhpcy5wcmludE9wZW5XaW5kb3cpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJ2VsZW1lbnQgd2l0aCBpZCAke2NsYXNzTmFtZX0gbm90IGZvdW5kLi4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByaW50IEFuZ3VsYXIgVGVtcGxhdGVSZWYgb3IgYSBDb21wb25lbnQgb3IgU3RyaW5nXHJcbiAgICogQHBhcmFtIGNvbnRlbnRUb1ByaW50XHJcbiAgICogQGV4YW1wbGVcclxuICAgKiB0aGlzLnByaW50ZXJTZXJ2aWNlLnByaW50QW5ndWxhcih0aGlzLlByaW50VGVtcGxhdGVUcGwpO1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmludEFuZ3VsYXIoY29udGVudFRvUHJpbnQ6IGFueSwgY29udGV4dD86IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgbmF0aXZlRWwgPSB0aGlzLmNyZWF0ZUNvbXBvbmVudChjb250ZW50VG9QcmludCwgbnVsbCwgY29udGV4dCk7XHJcblxyXG4gICAgdGhpcy5wcmludChuYXRpdmVFbC5uYXRpdmVFbGVtZW50LCB0aGlzLnByaW50T3BlbldpbmRvdyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBQcmludCBzaW5nbGUgaW1nXHJcbiAgICogQGV4YW1wbGVcclxuICAgKiB0aGlzLnByaW50ZXJTZXJ2aWNlLnByaW50SW1nKCdhc3NldHMvYnJhdHd1cnN0LmpwZycpO1xyXG4gICAqL1xyXG4gIHB1YmxpYyBwcmludEltZyhpbWdTcmM6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgY29tcFJlZiA9IHRoaXMuY3JlYXRlQ29tcG9uZW50KG51bGwsIGltZ1NyYyk7XHJcbiAgICBjb25zdCBvcGVuTmV3V2luZG93ID0gdGhpcy5wcmludE9wZW5XaW5kb3c7XHJcblxyXG4gICAgY29tcFJlZi5pbnN0YW5jZS5jb21wbGV0ZWQuc3Vic2NyaWJlKHZhbCA9PiB7XHJcbiAgICAgIGNvbXBSZWYuaG9zdFZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICBjb25zb2xlLmxvZygnY29tcGxldGVkOicsIHZhbCk7XHJcbiAgICAgIHRoaXMucHJpbnQoY29tcFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50LCBvcGVuTmV3V2luZG93KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJpbnQgYW4gbmF0aXZlIEVsZW1lbnQgKEhUTUwgRWxlbWVudClcclxuICAgKiBAcGFyYW0gbmF0aXZlRWxlbWVudFxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogdGhpcy5wcmludGVyU2VydmljZS5wcmludEhUTUxFbGVtZW50KHRoaXMuUHJpbnRDb21wb25lbnQubmF0aXZlRWxlbWVudCk7XHJcbiAgICovXHJcbiAgcHVibGljIHByaW50SFRNTEVsZW1lbnQobmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIHRoaXMucHJpbnQobmF0aXZlRWxlbWVudCwgdGhpcy5wcmludE9wZW5XaW5kb3cpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuZCByZW5kZXIgY29tcG9uZW50XHJcbiAgICogQHBhcmFtIGNvbnRlbnRUb1JlbmRlclxyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlQ29tcG9uZW50KGNvbnRlbnRUb1JlbmRlcjogYW55LCBpbWdTcmM/OiBzdHJpbmcsIGNvbnRleHQ/OiBhbnkpOiBhbnkge1xyXG4gICAgLy8gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNsZWFyKCk7XHJcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShOZ3hQcmludGVyQ29tcG9uZW50KTtcclxuICAgIGxldCBjb21wb25lbnRSZWY6IGFueTtcclxuXHJcbiAgICBpZiAoY29udGVudFRvUmVuZGVyKSB7XHJcbiAgICAgIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBuZ0NvbnRlbnQgPSB0aGlzLnJlc29sdmVOZ0NvbnRlbnQoY29udGVudFRvUmVuZGVyLCBjb250ZXh0KTtcclxuICAgICAgY29tcG9uZW50UmVmID0gZmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3RvciwgbmdDb250ZW50KTsgLy8gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbXBvbmVudFJlZiA9IGZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLnJlbmRlckNsYXNzID0gdGhpcy5yZW5kZXJDbGFzcztcclxuICAgIGlmIChpbWdTcmMpIHtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlLmltZ1NyYyA9IGltZ1NyYztcclxuICAgICAgcmV0dXJuIGNvbXBvbmVudFJlZjtcclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRSZWYuaG9zdFZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudFJlZi5sb2NhdGlvbjsgLy8gbG9jYXRpb24gaXMgbmF0aXZlIGVsZW1lbnRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1haW4gcHJpbnQgZnVuY3Rpb25cclxuICAgKiBAcGFyYW0gcHJpbnRDb250ZW50XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwcmludChwcmludENvbnRlbnQ6IGFueSwgcHJpbnRPcGVuV2luZG93OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAocHJpbnRPcGVuV2luZG93ID09PSB0cnVlKSB7XHJcbiAgICAgIGNvbnN0IHByaW50Q29udGVudENsb25lID0gZG9jdW1lbnQuaW1wb3J0Tm9kZShwcmludENvbnRlbnQsIHRydWUpOyAvLyBwcmludENvbnRlbnQuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICB0aGlzLnByaW50SW5OZXdXaW5kb3cocHJpbnRDb250ZW50Q2xvbmUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHByaW50T3BlbldpbmRvdyA9PT0gZmFsc2UpIHtcclxuICAgICAgY29uc3QgcHJpbnRDb250ZW50Q2xvbmUgPSBkb2N1bWVudC5pbXBvcnROb2RlKHByaW50Q29udGVudCwgdHJ1ZSk7IC8vIHByaW50Q29udGVudC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgIGNvbnN0IG5hdGl2ZUVsID0gdGhpcy5jcmVhdGVDb21wb25lbnQocHJpbnRDb250ZW50Q2xvbmUpLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgIHRoaXMub3Blbk5neFByaW50ZXIgPSBuYXRpdmVFbDtcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm9wZW5OZ3hQcmludGVyKTtcclxuICAgICAgLy8gd2luZG93LnNjcm9sbFRvKDAsIDApO1xyXG4gICAgICB0aGlzLmdldEFwcFJvb3QoKTtcclxuICAgICAgaWYgKHRoaXMuYXBwUm9vdCkge1xyXG4gICAgICAgIHRoaXMuYXBwUm9vdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnByaW50Q3VycmVudFdpbmRvdygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJpbnQgdXNpbmcgYSBuZXcgd2luZG93IC8gdGFiXHJcbiAgICogQHBhcmFtIGRpdlRvUHJpbnRcclxuICAgKi9cclxuICBwcml2YXRlIHByaW50SW5OZXdXaW5kb3coZGl2VG9QcmludDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnN0IHByaW50V2luZG93ID0gd2luZG93Lm9wZW4oJycsICdQUklOVCcpO1xyXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC50aXRsZTtcclxuXHJcbiAgICBwcmludFdpbmRvdy5kb2N1bWVudC53cml0ZShcclxuICAgICAgJzxIVE1MPjxIRUFEPjxUSVRMRT4nICsgdGl0bGUgKyAnPC9USVRMRT48L0hFQUQ+PEJPRFk+PC9CT0RZPjwvSFRNTD4nXHJcbiAgICApO1xyXG4gICAgLy8gcHJpbnRXaW5kb3cuZG9jdW1lbnQud3JpdGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmlubmVySFRNTCk7XHJcblxyXG4gICAgY29uc3QgcHJpbnRXaW5kb3dEb2MgPSBwcmludFdpbmRvdy5kb2N1bWVudDtcclxuICAgIHRoaXMuY29weUNzcyhwcmludFdpbmRvd0RvYyk7XHJcbiAgICBwcmludFdpbmRvd0RvYy5ib2R5LnN0eWxlLm1hcmdpbiA9ICcwIDAnO1xyXG4gICAgcHJpbnRXaW5kb3dEb2MuYm9keS5hcHBlbmRDaGlsZChkaXZUb1ByaW50KTtcclxuICAgIHByaW50V2luZG93LmRvY3VtZW50LmNsb3NlKCk7XHJcbiAgICAvLyBwcmludFdpbmRvd0RvYy5ib2R5LmlubmVySFRNTCA9IGRpdlRvUHJpbnQub3V0ZXJIVE1MO1xyXG4gICAgc2V0VGltZW91dChcclxuICAgICAgKCkgPT4gdGhpcy5wcmludFRhYldpbmRvdyhwcmludFdpbmRvdywgcHJpbnRXaW5kb3dEb2MpLFxyXG4gICAgICB0aGlzLnRpbWVUb1dhaXRSZW5kZXJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3B5IENzcyBsaW5rcyB0byBuZXcgcGFnZVxyXG4gICAqIEBwYXJhbSBwcmludFdpbmRvdyBcclxuICAgKi9cclxuICBwcml2YXRlIGNvcHlDc3MocHJpbnRXaW5kb3dEb2M6IERvY3VtZW50KSB7XHJcblxyXG4gICAgY29uc3QgbGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XHJcbiAgICBjb25zdCBzdHlsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpO1xyXG4gICAgY29uc3QgdGFyZ2V0SGVhZCA9IHByaW50V2luZG93RG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcblxyXG4gICAgbGlua3MuZm9yRWFjaChsaW5rID0+IHtcclxuICAgICAgdGFyZ2V0SGVhZC5hcHBlbmRDaGlsZChkb2N1bWVudC5pbXBvcnROb2RlKGxpbmssIHRydWUpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcclxuICAgICAgdGFyZ2V0SGVhZC5hcHBlbmRDaGlsZChkb2N1bWVudC5pbXBvcnROb2RlKHN0eWxlLCB0cnVlKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByaW50IHdpbmRvdyBpbiBuZXcgdGFiXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBwcmludFRhYldpbmRvdyhwcmludFdpbmRvdzogV2luZG93LCBwcmludFdpbmRvd0RvYzogRG9jdW1lbnQpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnByaW50UHJldmlld09ubHkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZWdpc3RlclByaW50RXZlbnQocHJpbnRXaW5kb3csIHRydWUpO1xyXG4gICAgdGhpcy5wcmludFdpbmRvd09wZW4ubmV4dCh0cnVlKTtcclxuICAgIHByaW50V2luZG93LmZvY3VzKCk7IC8vIG5lY2Vzc2FyeSBmb3IgSUUgPj0gMTAqL1xyXG4gICAgaWYgKHByaW50V2luZG93RG9jLmV4ZWNDb21tYW5kKCdwcmludCcpID09PSBmYWxzZSkge1xyXG4gICAgICBwcmludFdpbmRvdy5wcmludCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJpbnQgdGhlIHdob2xlIGN1cnJlbnQgd2luZG93XHJcbiAgICovXHJcbiAgcHVibGljIHByaW50Q3VycmVudFdpbmRvdygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnByaW50UHJldmlld09ubHkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZWdpc3RlclByaW50RXZlbnQod2luZG93LCBmYWxzZSk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgdGhpcy5wcmludFdpbmRvd09wZW4ubmV4dCh0cnVlKTtcclxuICAgICAgaWYgKGRvY3VtZW50LmV4ZWNDb21tYW5kKCdwcmludCcpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHdpbmRvdy5wcmludCgpO1xyXG4gICAgICB9XHJcbiAgICB9LCB0aGlzLnRpbWVUb1dhaXRSZW5kZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGVuIHRvIHByaW50IGV2ZW50IG9mIHdpbmRvd1xyXG4gICAqIEBwYXJhbSBwcmludFdpbmRvd1xyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVnaXN0ZXJQcmludEV2ZW50KHByaW50V2luZG93OiBXaW5kb3csIHByaW50V2l0aE9wZW5Jbk5ld1dpbmRvdzogYm9vbGVhbikge1xyXG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICBwcmludFdpbmRvdy5mb2N1cygpOyAvLyBuZWNlc3NhcnkgZm9yIElFID49IDEwKi9cclxuXHJcbiAgICBpZiAodGhhdC5ldmVudGFkZGVkW3ByaW50V2luZG93Lm5hbWVdKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHByaW50V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVycHJpbnQnLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuZXZlbnRhZGRlZFtwcmludFdpbmRvdy5uYW1lXSA9IHRydWU7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdhZnRlcnByaW50Jyk7XHJcbiAgICAgIGlmIChwcmludFdpdGhPcGVuSW5OZXdXaW5kb3cpIHtcclxuICAgICAgICB0aGF0LmV2ZW50YWRkZWRbcHJpbnRXaW5kb3cubmFtZV0gPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICB0aGF0LmNsZWFuVXAocHJpbnRXaW5kb3csIHByaW50V2l0aE9wZW5Jbk5ld1dpbmRvdyk7XHJcbiAgICAgIHRoYXQucHJpbnRXaW5kb3dPcGVuLm5leHQoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZSB0YWIgb3IgY2xlYW4gdXAgZG9tXHJcbiAgICogQGludGVybmFsXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjbGVhblVwKHByaW50V2luZG93OiBXaW5kb3csIHByaW50T3BlbldpbmRvdzogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKHByaW50T3BlbldpbmRvdyA9PT0gdHJ1ZSkge1xyXG4gICAgICBjb25zb2xlLmxvZygnY2xvc2UgcHJpbnQgd2luZG93Jyk7XHJcbiAgICAgIHByaW50V2luZG93LmNsb3NlKCk7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHByaW50V2luZG93LmNsb3NlKCk7XHJcbiAgICAgIH0sIDIwKTtcclxuICAgIH1cclxuICAgIGlmIChwcmludE9wZW5XaW5kb3cgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wZW5OZ3hQcmludGVyKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb2N1bWVudC5ib2R5LmdldEVsZW1lbnRzQnlUYWdOYW1lKCduZ3gtcHJpbnRlcicpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmFwcFJvb3QpIHtcclxuICAgICAgICAgIGlmICh0aGlzLmFwcFJvb3REaXNsYXlTZXR0aW5nICE9PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLmFwcFJvb3Quc3R5bGUuZGlzcGxheSA9IHRoaXMuYXBwUm9vdERpc2xheVNldHRpbmc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcFJvb3Quc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm9wZW5OZ3hQcmludGVyKTtcclxuICAgICAgICB0aGlzLm9wZW5OZ3hQcmludGVyID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBub2RlIG9yIGFuZ3VsYXIgY29tcG9uZW50XHJcbiAgICogQHBhcmFtIGNvbnRlbnRcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwcml2YXRlIHJlc29sdmVOZ0NvbnRlbnQ8VD4oY29udGVudDogQ29udGVudDxUPiwgY29udGV4dDogYW55KTogYW55IHtcclxuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbnRlbnQpO1xyXG4gICAgICByZXR1cm4gW1tlbGVtZW50XV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbnRlbnQgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlZikge1xyXG4gICAgICBjb25zdCB2aWV3UmVmID0gY29udGVudC5jcmVhdGVFbWJlZGRlZFZpZXcoY29udGV4dCk7XHJcbiAgICAgIHZpZXdSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICByZXR1cm4gW3ZpZXdSZWYucm9vdE5vZGVzXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgIHJldHVybiBbW2NvbnRlbnRdXTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogT3RoZXJ3aXNlIGl0J3MgYSBjb21wb25lbnQgKi9cclxuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbnRlbnQpO1xyXG5cclxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgY29tcG9uZW50UmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgIHJldHVybiBbW2NvbXBvbmVudFJlZi5sb2NhdGlvbi5uYXRpdmVFbGVtZW50XV07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZWFyY2ggZm9yIEFuZ3VsYXIgQXBwIFJvb3RcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKi9cclxuICBwcml2YXRlIGdldEFwcFJvb3QoKTogdm9pZCB7XHJcbiAgICBjb25zdCBhcHBSb290ID0gZG9jdW1lbnQuYm9keS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0aGlzLmFwcFJvb3ROYW1lKTtcclxuICAgIGlmIChhcHBSb290Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYXBwUm9vdCA9IDxIVE1MRWxlbWVudD4gYXBwUm9vdFswXTtcclxuICAgICAgdGhpcy5hcHBSb290RGlzbGF5U2V0dGluZyA9IHRoaXMuYXBwUm9vdC5zdHlsZS5kaXNwbGF5O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGEgbmV3IGl0ZW0gdG8gcHJpbnRcclxuICAgKiBVc2VkIGJ5IGRpcmVjdGl2ZVxyXG4gICAqIEBpbnRlcm5hbFxyXG4gICAqIEBwYXJhbSBuZXdQcmludEl0ZW0gIEhUTUwgaWRcclxuICAgKi9cclxuICBwdWJsaWMgYWRkUHJpbnRJdGVtKG5ld1ByaW50SXRlbTogUHJpbnRJdGVtKTogdm9pZCB7XHJcbiAgICBjb25zdCB0bXBJdGVtcyA9IHRoaXMuX3ByaW50SXRlbXMuZ2V0VmFsdWUoKTtcclxuICAgIHRtcEl0ZW1zLnB1c2gobmV3UHJpbnRJdGVtKTtcclxuICAgIHRoaXMuX3ByaW50SXRlbXMubmV4dCh0bXBJdGVtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGUgYSBwcmludCBpdGVtIGZyb20gc2VydmljZVxyXG4gICAqIFVzZWQgYnkgZGlyZWN0aXZlXHJcbiAgICogQGludGVybmFsXHJcbiAgICogQHBhcmFtIGlkT2ZJdGVtVG9SZW1vdmVcclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlUHJpbnRJdGVtKGlkT2ZJdGVtVG9SZW1vdmU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgdG1wSXRlbXMgPSB0aGlzLl9wcmludEl0ZW1zLmdldFZhbHVlKCk7XHJcbiAgICBjb25zdCBuZXdJaXRlbXMgPSB0bXBJdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLmlkICE9PSBpZE9mSXRlbVRvUmVtb3ZlKTtcclxuICAgIHRoaXMuX3ByaW50SXRlbXMubmV4dChuZXdJaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgICAvKipcclxuICAgKiBHZXRzIGEgc2luZ2xlIHByaW50IGl0ZW0gZnJvbSBzZXJ2aWNlXHJcbiAgICogVXNlZCBieSBkaXJlY3RpdmVcclxuICAgKiBAaW50ZXJuYWxcclxuICAgKiBAcGFyYW0gaWRPZkl0ZW1Ub0ZpbmRcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0UHJpbnRJdGVtKGlkT2ZJdGVtVG9SZW1vdmU6IHN0cmluZyk6IFByaW50SXRlbSB7XHJcbiAgICBjb25zdCB0bXBJdGVtcyA9IHRoaXMuX3ByaW50SXRlbXMuZ2V0VmFsdWUoKTtcclxuICAgIGNvbnN0IGZvdW5kSXRlbSA9IHRtcEl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLmlkID09PSBpZE9mSXRlbVRvUmVtb3ZlKTtcclxuICAgIHJldHVybiBmb3VuZEl0ZW07XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUHJpbnQgYSBwcmludCBJdGVtXHJcbiAgICogQHBhcmFtIHByaW50SXRlbVRvUHJpbnRcclxuICAgKi9cclxuICBwdWJsaWMgcHJpbnRQcmludEl0ZW0ocHJpbnRJdGVtVG9QcmludDogUHJpbnRJdGVtKTogdm9pZCB7XHJcbiAgICB0aGlzLnByaW50SFRNTEVsZW1lbnQocHJpbnRJdGVtVG9QcmludC5uYXRpdmVFbGVtZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByaW50IGFsIGxpc3Qgb2YgcHJpbnQgSXRlbXMgb25lIGFmdGVyIHRoZSBvdGhlclxyXG4gICAqIEBwYXJhbSBwcmludEl0ZW1Ub1ByaW50XHJcbiAgICovXHJcbiAgcHVibGljIHByaW50UHJpbnRJdGVtcyhwcmludEl0ZW1zVG9QcmludDogUHJpbnRJdGVtW10sIGNsYXNzTmFtZT86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3QgbmV3RGl2ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgIGlmIChjbGFzc05hbWUpIHtcclxuICAgICAgbmV3RGl2LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld0Rpdi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICBuZXdEaXYuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xyXG4gICAgfVxyXG5cclxuICAgIHByaW50SXRlbXNUb1ByaW50LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIG5ld0Rpdi5hcHBlbmRDaGlsZChlbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xvbmVOb2RlKHRydWUpKTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICB0aGlzLnByaW50SFRNTEVsZW1lbnQobmV3RGl2KTtcclxuICB9XHJcbn1cclxuIl19