import { Directive, ElementRef, Input } from '@angular/core';
import { NgxPrinterService } from './ngx-printer.service';
/**
 * Directly add function to a button to print an item
 */
export class PrintItemButtonDirective {
    constructor(el, printerService) {
        this.el = el;
        this.printerService = printerService;
        /**
         * Id of print item to be printed
         */
        this.printItemId = '';
        /**
         * html id of div to be printed
         */
        this.divID = '';
        /**
         * print item by class name
         */
        this.className = '';
        /**
         * print current window
         */
        this.printWindow = 'false';
    }
    ngOnInit() {
        if (this.el.nativeElement && this.checkInputs()) {
            this.el.nativeElement.addEventListener('click', () => {
                if (this.printItemId !== '') {
                    this.prinPrintItem();
                }
                if (this.divID !== '') {
                    this.printerService.printDiv(this.divID);
                }
                if (this.className !== '') {
                    this.printerService.printByClassName(this.className);
                }
                if (this.printWindow !== 'false') {
                    this.printerService.printCurrentWindow();
                }
            });
        }
    }
    /**
     * Check if at least one property is set
     */
    checkInputs() {
        const check = !(this.printWindow === 'false' && this.printItemId === '' && this.divID === '' && this.className === '');
        return check;
    }
    /**
     * print item from print items
     */
    prinPrintItem() {
        const itemToPrint = this.printerService.getPrintItem(this.printItemId);
        if (itemToPrint) {
            this.printerService.printPrintItem(itemToPrint);
        }
    }
}
PrintItemButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxPrintItemButton]'
            },] }
];
PrintItemButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgxPrinterService }
];
PrintItemButtonDirective.propDecorators = {
    printItemId: [{ type: Input }],
    divID: [{ type: Input }],
    className: [{ type: Input }],
    printWindow: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtaXRlbS1idXR0b24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXByaW50ZXIvc3JjL2xpYi9wcmludC1pdGVtLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzFEOztHQUVHO0FBSUgsTUFBTSxPQUFPLHdCQUF3QjtJQTJCbkMsWUFDVSxFQUFjLEVBQ2QsY0FBaUM7UUFEakMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQTNCM0M7O1dBRUc7UUFFSCxnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUVqQjs7V0FFRztRQUVILFVBQUssR0FBRyxFQUFFLENBQUM7UUFFWDs7V0FFRztRQUVILGNBQVMsR0FBRyxFQUFFLENBQUM7UUFFZjs7V0FFRztRQUVILGdCQUFXLEdBQUcsT0FBTyxDQUFDO0lBTW5CLENBQUM7SUFFSixRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDckQsSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLEVBQUUsRUFBRTtvQkFDM0IsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO2lCQUN0QjtnQkFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFO29CQUNyQixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzFDO2dCQUNELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxFQUFFLEVBQUU7b0JBQ3pCLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUN0RDtnQkFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssT0FBTyxFQUFFO29CQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixFQUFFLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNLLFdBQVc7UUFDakIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkgsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSyxhQUFhO1FBQ25CLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RSxJQUFJLFdBQVcsRUFBRTtZQUNmLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2pEO0lBQ0gsQ0FBQzs7O1lBdEVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2FBQ2pDOzs7WUFUbUIsVUFBVTtZQUNyQixpQkFBaUI7OzswQkFjdkIsS0FBSztvQkFNTCxLQUFLO3dCQU1MLEtBQUs7MEJBTUwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hQcmludGVyU2VydmljZSB9IGZyb20gJy4vbmd4LXByaW50ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFByaW50SXRlbSB9IGZyb20gJy4vcHJpbnQtaXRlbSc7XHJcblxyXG4vKipcclxuICogRGlyZWN0bHkgYWRkIGZ1bmN0aW9uIHRvIGEgYnV0dG9uIHRvIHByaW50IGFuIGl0ZW1cclxuICovXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW25neFByaW50SXRlbUJ1dHRvbl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcmludEl0ZW1CdXR0b25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAvKipcclxuICAgKiBJZCBvZiBwcmludCBpdGVtIHRvIGJlIHByaW50ZWRcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIHByaW50SXRlbUlkID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIGh0bWwgaWQgb2YgZGl2IHRvIGJlIHByaW50ZWRcclxuICAgKi9cclxuICBASW5wdXQoKVxyXG4gIGRpdklEID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIHByaW50IGl0ZW0gYnkgY2xhc3MgbmFtZVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgY2xhc3NOYW1lID0gJyc7XHJcblxyXG4gIC8qKlxyXG4gICAqIHByaW50IGN1cnJlbnQgd2luZG93XHJcbiAgICovXHJcbiAgQElucHV0KClcclxuICBwcmludFdpbmRvdyA9ICdmYWxzZSc7XHJcblxyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHByaW50ZXJTZXJ2aWNlOiBOZ3hQcmludGVyU2VydmljZVxyXG4gICkge31cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5lbC5uYXRpdmVFbGVtZW50ICYmIHRoaXMuY2hlY2tJbnB1dHMoKSkge1xyXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcmludEl0ZW1JZCAhPT0gJycpIHtcclxuICAgICAgICAgIHRoaXMucHJpblByaW50SXRlbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kaXZJRCAhPT0gJycpIHtcclxuICAgICAgICAgIHRoaXMucHJpbnRlclNlcnZpY2UucHJpbnREaXYodGhpcy5kaXZJRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgIHRoaXMucHJpbnRlclNlcnZpY2UucHJpbnRCeUNsYXNzTmFtZSh0aGlzLmNsYXNzTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByaW50V2luZG93ICE9PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgICB0aGlzLnByaW50ZXJTZXJ2aWNlLnByaW50Q3VycmVudFdpbmRvdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBhdCBsZWFzdCBvbmUgcHJvcGVydHkgaXMgc2V0XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjaGVja0lucHV0cygpIHtcclxuICAgIGNvbnN0IGNoZWNrID0gISh0aGlzLnByaW50V2luZG93ID09PSAnZmFsc2UnICYmIHRoaXMucHJpbnRJdGVtSWQgPT09ICcnICYmIHRoaXMuZGl2SUQgPT09ICcnICYmIHRoaXMuY2xhc3NOYW1lID09PSAnJyk7XHJcbiAgICByZXR1cm4gY2hlY2s7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBwcmludCBpdGVtIGZyb20gcHJpbnQgaXRlbXNcclxuICAgKi9cclxuICBwcml2YXRlIHByaW5QcmludEl0ZW0oKSB7XHJcbiAgICBjb25zdCBpdGVtVG9QcmludCA9IHRoaXMucHJpbnRlclNlcnZpY2UuZ2V0UHJpbnRJdGVtKHRoaXMucHJpbnRJdGVtSWQpO1xyXG4gICAgaWYgKGl0ZW1Ub1ByaW50KSB7XHJcbiAgICAgIHRoaXMucHJpbnRlclNlcnZpY2UucHJpbnRQcmludEl0ZW0oaXRlbVRvUHJpbnQpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=