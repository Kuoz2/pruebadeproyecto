import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { BreakpointObserver } from '@angular/cdk/layout';
import { AccessibleComponent } from '../../accessible.component';
import { AccessibilityConfig } from '../../../model/accessibility.interface';
import { Image, ImageEvent } from '../../../model/image.class';
import { InternalLibImage } from '../../../model/image-internal.class';
import { CarouselPreviewConfig } from '../../../model/carousel-preview-config.interface';
import { CarouselConfig } from '../../../model/carousel-config.interface';
import { Action } from '../../../model/action.enum';
/**
 * Component with image previews for carousel
 */
import * as ɵngcc0 from '@angular/core';
export declare class CarouselPreviewsComponent extends AccessibleComponent implements OnInit, OnChanges, OnDestroy {
    private ref;
    private breakpointObserver;
    private sanitizer;
    /**
     * Variable to change the max-width of the host component
     */
    hostMaxWidth: string;
    /**
     * Variable to set aria-label of the host component
     */
    ariaLabel: string;
    /**
     * Object of type `CarouselConfig` to init CarouselComponent's features.
     * For instance, it contains parameters to change the style, how it navigates and so on.
     */
    carouselConfig: CarouselConfig;
    /**
     * Object of type `InternalLibImage` that represent the visible image.
     */
    currentImage: InternalLibImage;
    /**
     * Array of `InternalLibImage` that represent the model of this library with all images,
     * thumbs and so on.
     */
    images: InternalLibImage[];
    /**
     * Object of type `CarouselPreviewConfig` to init PreviewsComponent's features.
     * For instance, it contains a param to show/hide this component, sizes.
     */
    previewConfig: CarouselPreviewConfig;
    /**
     * Object of type `AccessibilityConfig` to init custom accessibility features.
     * For instance, it contains titles, alt texts, aria-labels and so on.
     */
    accessibilityConfig: AccessibilityConfig;
    /**
     * Output to emit the clicked preview. The payload contains the `InternalLibImage` associated to the clicked preview.
     */
    clickPreview: EventEmitter<ImageEvent>;
    /**
     * Enum of type `Action` that represents a mouse click on a button.
     * Declared here to be used inside the template.
     */
    clickAction: Action;
    /**
     * Enum of type `Action` that represents a keyboard action.
     * Declared here to be used inside the template.
     */
    keyboardAction: Action;
    /**
     * Array of `InternalLibImage` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    previews: InternalLibImage[];
    /**
     * Object of type `CarouselPreviewConfig` exposed to the template. This field is initialized
     * applying transformations, default values and so on to the input of the same type.
     */
    configPreview: CarouselPreviewConfig;
    /**
     * Start index (inclusive) of the input images used to display previews.
     */
    start: number;
    /**
     * End index (non inclusive) of the input images used to display previews.
     */
    end: number;
    /**
     * Private property with the default max height of previews.
     */
    private defaultMaxHeight;
    private breakpointSubscription;
    constructor(ref: ChangeDetectorRef, breakpointObserver: BreakpointObserver, sanitizer: DomSanitizer);
    /**
     * Method to update the height of previews, passing the desired height as input.
     * @param configBreakpointHeight is a number that represent the desired height to set.
     */
    private updateHeight;
    /**
     * Method ´ngOnInit´ to build `configPreview` applying a default value and also to
     * init the `previews` array.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method to check if an image is active (i.e. a preview image).
     * @param InternalLibImage preview is an image to check if it's active or not
     * @returns boolean true if is active, false otherwise
     */
    isActive(preview: InternalLibImage): boolean;
    /**
     * Method ´ngOnChanges´ to update `previews` array.
     * Also, both `start` and `end` local variables will be updated accordingly.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Method called by events from both keyboard and mouse on a preview.
     * This will trigger the `clickpreview` output with the input preview as its payload.
     * @param InternalLibImage preview that triggered this method
     * @param KeyboardEvent | MouseEvent event payload
     * @param Action that triggered this event (Action.NORMAL by default)
     */
    onImageEvent(preview: InternalLibImage, event: KeyboardEvent | MouseEvent, action?: Action): void;
    /**
     * Method called by events from both keyboard and mouse on a navigation arrow.
     * @param string direction of the navigation that can be either 'next' or 'prev'
     * @param KeyboardEvent | MouseEvent event payload
     */
    onNavigationEvent(direction: string, event: KeyboardEvent | MouseEvent): void;
    /**
     * Method to get aria-label text for a preview image.
     * @param Image is the preview
     */
    getAriaLabel(preview: Image): string;
    /**
     * Method to get title text for a preview image.
     * @param Image is the preview
     */
    getTitle(preview: Image): string;
    /**
     * Method to get alt text for a preview image.
     * @param Image is the preview
     */
    getAlt(preview: Image): string;
    /**
     * Method used in the template to track ids in ngFor.
     * @param number index of the array
     * @param Image item of the array
     * @returns number the id of the item
     */
    trackById(index: number, item: Image): number;
    /**
     * Method used in template to sanitize an url when you need legacyIE11Mode.
     * In this way you can set an url as background of a div.
     * @param unsafeStyle is a string and represents the url to sanitize.
     * @returns a SafeStyle object that can be used in template without problems.
     */
    sanitizeUrlBgStyle(unsafeStyle: string): SafeStyle;
    /**
     * Method to get the background-size value when IE11LegacyMode is enabled.
     * This prevent weired behaviour on IE11 when previews are really small, but original images (.png/.jgp/...) are big.
     * Using 'cover' it's not enough, because it's causing empty background in some cases.
     * After some experiments, I decided to use the double of the height and auto as width.
     */
    getIE11LegacyBgSize(): string;
    /**
     * Method to cleanup resources. In fact, it cleans breakpointSubscription.
     * This is an Angular's lifecycle hook that is called when this component is destroyed.
     */
    ngOnDestroy(): void;
    /**
     * Private method to init previews based on the currentImage and the full array of images.
     * The current image in mandatory to show always the current preview (as highlighted).
     * @param InternalLibImage currentImage to decide how to show previews, because I always want to see the current image as highlighted
     * @param InternalLibImage[] images is the array of all images.
     */
    private initPreviews;
    /**
     * Private method to init both `start` and `end` to the beginning.
     */
    private setBeginningIndexesPreviews;
    /**
     * Private method to init both `start` and `end` to the end.
     */
    private setEndIndexesPreviews;
    /**
     * Private method to update the visible previews navigating to the right (next).
     */
    private next;
    /**
     * Private method to update the visible previews navigating to the left (previous).
     */
    private previous;
    /**
     * Private method to block/permit sliding between previews.
     * @param number boundaryIndex is the first or the last index of `images` input array
     * @returns boolean if true block sliding, otherwise not
     */
    private isPreventSliding;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CarouselPreviewsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CarouselPreviewsComponent, "ks-carousel-previews", never, { "carouselConfig": "carouselConfig"; "currentImage": "currentImage"; "images": "images"; "previewConfig": "previewConfig"; "accessibilityConfig": "accessibilityConfig"; }, { "clickPreview": "clickPreview"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,