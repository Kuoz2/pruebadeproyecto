/// <reference types="mousetrap" />
import { InjectionToken } from '@angular/core';
import { KeyboardServiceConfig } from '../model/keyboard-service-config.interface';
import * as ɵngcc0 from '@angular/core';
export declare const KEYBOARD_CONFIGURATION: InjectionToken<KeyboardServiceConfig>;
/**
 * Service to intercept ctrl+s (or cmd+s on macOS) using a third-party library, called Mousetrap.
 */
export declare class KeyboardService {
    private config;
    /**
     * Private Mousetrap variable to store the instance.
     */
    private mousetrap;
    /**
     * Private variable to store shortcuts as either Array or string.
     */
    private shortcuts;
    /**
     * Constructor of `KeyboardService` to init `mousetrap` and `shortcuts` private variables.
     * @param KeyboardServiceConfig config object received by the `forRoot()` function to init custom shortcuts
     */
    constructor(config: KeyboardServiceConfig);
    /**
     * Method to add a lister for ctrl+s/cmd+s keyboard events.
     * @param (e: ExtendedKeyboardEvent, combo: string) => any onBind callback function to add shortcuts
     */
    add(onBind: (e: ExtendedKeyboardEvent, combo: string) => any): void;
    /**
     * Method to reset all listeners. Please, call this function when needed
     * to free resources ad prevent leaks.
     */
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<KeyboardService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<KeyboardService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJrZXlib2FyZC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJtb3VzZXRyYXBcIiAvPlxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtleWJvYXJkU2VydmljZUNvbmZpZyB9IGZyb20gJy4uL21vZGVsL2tleWJvYXJkLXNlcnZpY2UtY29uZmlnLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBLRVlCT0FSRF9DT05GSUdVUkFUSU9OOiBJbmplY3Rpb25Ub2tlbjxLZXlib2FyZFNlcnZpY2VDb25maWc+O1xuLyoqXG4gKiBTZXJ2aWNlIHRvIGludGVyY2VwdCBjdHJsK3MgKG9yIGNtZCtzIG9uIG1hY09TKSB1c2luZyBhIHRoaXJkLXBhcnR5IGxpYnJhcnksIGNhbGxlZCBNb3VzZXRyYXAuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEtleWJvYXJkU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZSBNb3VzZXRyYXAgdmFyaWFibGUgdG8gc3RvcmUgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIHByaXZhdGUgbW91c2V0cmFwO1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgdmFyaWFibGUgdG8gc3RvcmUgc2hvcnRjdXRzIGFzIGVpdGhlciBBcnJheSBvciBzdHJpbmcuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG9ydGN1dHM7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3Igb2YgYEtleWJvYXJkU2VydmljZWAgdG8gaW5pdCBgbW91c2V0cmFwYCBhbmQgYHNob3J0Y3V0c2AgcHJpdmF0ZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIEtleWJvYXJkU2VydmljZUNvbmZpZyBjb25maWcgb2JqZWN0IHJlY2VpdmVkIGJ5IHRoZSBgZm9yUm9vdCgpYCBmdW5jdGlvbiB0byBpbml0IGN1c3RvbSBzaG9ydGN1dHNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IEtleWJvYXJkU2VydmljZUNvbmZpZyk7XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGFkZCBhIGxpc3RlciBmb3IgY3RybCtzL2NtZCtzIGtleWJvYXJkIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0gKGU6IEV4dGVuZGVkS2V5Ym9hcmRFdmVudCwgY29tYm86IHN0cmluZykgPT4gYW55IG9uQmluZCBjYWxsYmFjayBmdW5jdGlvbiB0byBhZGQgc2hvcnRjdXRzXG4gICAgICovXG4gICAgYWRkKG9uQmluZDogKGU6IEV4dGVuZGVkS2V5Ym9hcmRFdmVudCwgY29tYm86IHN0cmluZykgPT4gYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgdG8gcmVzZXQgYWxsIGxpc3RlbmVycy4gUGxlYXNlLCBjYWxsIHRoaXMgZnVuY3Rpb24gd2hlbiBuZWVkZWRcbiAgICAgKiB0byBmcmVlIHJlc291cmNlcyBhZCBwcmV2ZW50IGxlYWtzLlxuICAgICAqL1xuICAgIHJlc2V0KCk6IHZvaWQ7XG59XG4iXX0=