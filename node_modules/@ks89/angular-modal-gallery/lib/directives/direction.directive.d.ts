import { ElementRef, OnChanges, OnInit, Renderer2 } from '@angular/core';
/**
 * Directive to change the flex-direction of an element, based on two inputs (`direction` and `justify`).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DirectionDirective implements OnInit, OnChanges {
    private renderer;
    private el;
    /**
     * String input to set the css flex-direction of an element.
     */
    direction: string;
    /**
     * String input to set the css justify-content of an element.
     */
    justify: string;
    constructor(renderer: Renderer2, el: ElementRef);
    /**
     * Method ´ngOnInit´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called only one time!!!
     */
    ngOnInit(): void;
    /**
     * Method ´ngOnChanges´ to apply the style of this directive.
     * This is an Angular's lifecycle hook, so its called automatically by Angular itself.
     * In particular, it's called when any data-bound property of a directive changes!!!
     */
    ngOnChanges(): void;
    /**
     * Private method to change both direction and justify of an element.
     */
    private applyStyle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DirectionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DirectionDirective, "[ksDirection]", never, { "direction": "direction"; "justify": "justify"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkaXJlY3Rpb24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuLyoqXG4gKiBEaXJlY3RpdmUgdG8gY2hhbmdlIHRoZSBmbGV4LWRpcmVjdGlvbiBvZiBhbiBlbGVtZW50LCBiYXNlZCBvbiB0d28gaW5wdXRzIChgZGlyZWN0aW9uYCBhbmQgYGp1c3RpZnlgKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGlyZWN0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICAvKipcbiAgICAgKiBTdHJpbmcgaW5wdXQgdG8gc2V0IHRoZSBjc3MgZmxleC1kaXJlY3Rpb24gb2YgYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTdHJpbmcgaW5wdXQgdG8gc2V0IHRoZSBjc3MganVzdGlmeS1jb250ZW50IG9mIGFuIGVsZW1lbnQuXG4gICAgICovXG4gICAganVzdGlmeTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKiBNZXRob2QgwrRuZ09uSW5pdMK0IHRvIGFwcGx5IHRoZSBzdHlsZSBvZiB0aGlzIGRpcmVjdGl2ZS5cbiAgICAgKiBUaGlzIGlzIGFuIEFuZ3VsYXIncyBsaWZlY3ljbGUgaG9vaywgc28gaXRzIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IEFuZ3VsYXIgaXRzZWxmLlxuICAgICAqIEluIHBhcnRpY3VsYXIsIGl0J3MgY2FsbGVkIG9ubHkgb25lIHRpbWUhISFcbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1ldGhvZCDCtG5nT25DaGFuZ2VzwrQgdG8gYXBwbHkgdGhlIHN0eWxlIG9mIHRoaXMgZGlyZWN0aXZlLlxuICAgICAqIFRoaXMgaXMgYW4gQW5ndWxhcidzIGxpZmVjeWNsZSBob29rLCBzbyBpdHMgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYnkgQW5ndWxhciBpdHNlbGYuXG4gICAgICogSW4gcGFydGljdWxhciwgaXQncyBjYWxsZWQgd2hlbiBhbnkgZGF0YS1ib3VuZCBwcm9wZXJ0eSBvZiBhIGRpcmVjdGl2ZSBjaGFuZ2VzISEhXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQcml2YXRlIG1ldGhvZCB0byBjaGFuZ2UgYm90aCBkaXJlY3Rpb24gYW5kIGp1c3RpZnkgb2YgYW4gZWxlbWVudC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGFwcGx5U3R5bGU7XG59XG4iXX0=